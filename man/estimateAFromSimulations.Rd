% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{estimateAFromSimulations}
\alias{estimateAFromSimulations}
\title{Get the interspecies interaction matrix A using leave-one-out method}
\usage{
estimateAFromSimulations(
  simulations,
  simulations2,
  n_instances = 1,
  t_end = NULL,
  scale_off_diagonal = 0.1,
  diagonal = -0.5,
  connectance = 0.2
)
}
\arguments{
\item{simulations}{A list of simulation(s) with complete species}

\item{simulations2}{A list of simulation(s), each with one absent
species}

\item{n_instances}{Integer: number of instances to generate
(default: \code{n_instances = 1})}

\item{t_end}{Numeric: end time of the simulation. If not identical with t_end
in params_list, then it will overwrite t_end in each simulation
(default: \code{t_end = 1000})}

\item{scale_off_diagonal}{Numeric: scale of the off-diagonal elements
compared to the diagonal. Same to the parameter in function \code{randomA}.
(default: \code{scale_off_diagonal = 0.1})}

\item{diagonal}{Values defining the strength of self-interactions. Input can
be a number (will be applied to all species) or a vector of length n_species.
Positive self-interaction values lead to exponential growth. Same to the
parameter in function \code{randomA}.
(default: \code{diagonal = -0.5})}

\item{connectance}{Numeric frequency of inter-species interactions.
i.e. proportion of non-zero off-diagonal terms. Should be in the interval
0 <= connectance <= 1. Same to the parameter in function \code{randomA}.
(default: \code{connectance = 0.2})}
}
\value{
a matrix A with dimensions (n_species x n_species) where n_species
equals to the number of elements in simulations2
}
\description{
generate matrix A from the comparisons between simulations with one absent
species and a simulation with complete species (leave-one-out)
}
\examples{
# example of generateSimulations
# FIXME: reduce computational load by lowering the number of species and timesteps in the demo
params <- list(
    n_species = 10,
    n_resources = 5,
    E = randomE(
        n_species = 10, n_resources = 5,
        mean_consumption = 1, mean_production = 3
    ),
    x0 = rep(0.001, 10),
    resources = rep(1000, 5),
    monod_constant = matrix(rbeta(10 * 5, 10, 10), nrow = 10, ncol = 5),
    inflow_rate = .5,
    outflow_rate = .5,
    migration_p = 0,
    stochastic = TRUE,
    t_start = 0,
    t_end = 20,
    t_store = 100,
    growth_rates = runif(10),
    norm = FALSE
)

# Recommended standard way to generate a set of n simulations (n=2 here) from a given model
simulations <- lapply(seq_len(2), function (i) {do.call(simulateConsumerResource, params)})
# Visualize the model for the first instance
# miaViz::plotSeries(simulations[[1]], "time")

# List state for each community (instance) at its last time point;
# this results in instances x species matrix; means and variances per species can be computed col-wise
communities <-  t(sapply(simulations, function (x) {assay(x, "counts")[, which.max(x$time)]}))

# Some more advanced examples for hardcore users:

# test leave-one-out in CRM
.replaceByZero <- function(input_list) { # params_iter$x0 as input_list
    if (!all(length(input_list) == unlist(unique(lapply(input_list, length))))) {
        stop("Length of input_list doesn't match length of element in it.")
    }
    for (i in seq_along(input_list)) {
        input_list[[i]][[i]] <- 0
    }
    return(input_list)
}
createParamList <- function(input_param, n_repeat, replace_by_zero = FALSE) {
    res_list <- vector(mode = "list", length = n_repeat)
    for (i in seq_len(n_repeat)) {
        res_list[[i]] <- input_param
    }
    if (replace_by_zero) res_list <- .replaceByZero(res_list)
    return(res_list)
}

# Test overwrite params
paramx0 <- createParamList(input_param = rep(0.001, 10), n_repeat = 10, replace_by_zero = TRUE)
paramresources <- createParamList(input_param = rep(1000, 5), n_repeat = 10)
params_iter <- list(x0 = paramx0, resources = paramresources)
simulations2 <- generateSimulations(
    model = "simulateConsumerResource",
    params_list = params, param_iter = params_iter, n_instances = 1, t_end = 20
)

estimatedA <- estimateAFromSimulations(simulations, simulations2, n_instances = 1,
    scale_off_diagonal = 1, diagonal = -0.5, connectance = 0.2
) / 1000

# Using these parameters with a specified simulator
m <- simulateGLV(n_species = 10, x0 = params$x0,
    A = estimatedA, growth_rates = params$growth_rates, t_end = 20, t_store = 100)
# miaViz::plotSeries(m, "time") # Plotting 

}
