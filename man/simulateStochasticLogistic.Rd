% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simulateStochasticLogistic.R
\name{simulateStochasticLogistic}
\alias{simulateStochasticLogistic}
\title{Stochastic Logistic simulation}
\usage{
simulateStochasticLogistic(
  n.species,
  b = runif(n = n.species, min = 0.1, max = 0.2),
  k = runif(n = n.species, min = 1000, max = 2000),
  dr = runif(n = n.species, min = 5e-04, max = 0.0025),
  x = runif(n = n.species, min = 0.1, max = 10),
  sigma.drift = 0.001,
  sigma.epoch = 0.1,
  sigma.external = 0.3,
  p.epoch = 0.001,
  t.external_events = c(0, 240, 480),
  t.external_durations = c(0, 1, 1),
  return.matrix = FALSE,
  stochastic = TRUE,
  t.end = 1000,
  ...
)
}
\arguments{
\item{n.species}{Integer: number of species}

\item{b}{Numeric: growth rates
(default: \code{b = runif(n = n.species, min = 0.1, max = 0.2)})}

\item{k}{Numeric: carrying capacities
(default: \code{k = runif(n = n.species, min = 1000, max = 2000)})}

\item{dr}{Numeric: death rates
(default: \code{dr = runif(n = n.species, min = 0.0005, max = 0.0025)})}

\item{x}{Numeric: initial abundances
(default: \code{x = runif(n = n.species, min = 0.1, max = 10)})}

\item{sigma.drift}{Numeric: degree of drift (turnover of species) in each
time step.
(default: \code{sigma.drift = 0.001})}

\item{sigma.epoch}{Numeric: degree of epoch change of community
(default: \code{sigma.epoch = 0.1})}

\item{sigma.external}{Numeric: degree of external events/disturbances
(default: \code{sigma.external = 0.3})}

\item{p.epoch}{Numeric: probability/frequency of inherit periodic changes of
community
(default: \code{p.epoch = 0.001})}

\item{t.external_events}{Numeric: starting times of external events
(default: \code{t.external_events = c(0, 240, 480)})}

\item{t.external_durations}{Numeric: durations of external events
(default: \code{t.external_durations = c(0, 1, 1)})}

\item{return.matrix}{Logical: whether to export only the stored time points
in a matrix
(default: \code{return.matrix = FALSE})}

\item{stochastic}{Logical: whether the logistic model should be stochastic
(controlled by multiplying the growth rate by a random number)
(default: \code{stochastic = TRUE})}

\item{t.end}{Numeric scalar indicating the final time of the simulation
(default: \code{t.end = 1000})}

\item{...}{additional parameters including 't.start', 't.step', and 't.store'}
}
\value{
\code{simulateStochasticLogistic} returns a
\linkS4class{SummarizedExperiment} class object containing matrix with
species abundance as rows and time points as columns
}
\description{
Simulates time series with the (stochastic) logistic model and
forms a \linkS4class{SummarizedExperiment} object or a matrix.
}
\details{
Simulates a community time series using the logistic model.
The change rate of the species was defined as
\code{dx/dt = b*x*(1-(x/k))*rN - dr*x}, where
b is the vector of growth rates,
x is the vector of initial species abundances,
k is the vector of maximum carrying capacities,
rN is a random number ranged from 0 to 1 which changes in each time step,
dr is the vector of constant death rates.
Also, the vectors of initial dead species abundances can be set.
The number of species will be set to 0 if the dead species abundances
surpass the alive species abundances.

The resulting abundance matrix model is used to construct
\linkS4class{SummarizedExperiment} object.
}
\examples{
## ATTENTION: Don't set a large value to t.step, otherwise the computer won't
#give a correct solution to the logistic ODE(ordinary differential equation).
#Keeping t.step under 0.05 or 0.01 is a good practice.

#while (!exists("ExampleLogistic"))
ExampleLogistic <- simulateStochasticLogistic(n.species = 5)
#plot the calculated points
matplot(t(assays(ExampleLogistic)[["counts"]]), type = "l")

#calculation by setting initial parameters explicitly
ExampleLogistic <- simulateStochasticLogistic(
n.species = 2,
b = c(0.2, 0.1), k = c(1000, 2000), dr = c(0.001, 0.0015), x = c(3, 0.1),
sigma.drift = 0.001, sigma.epoch = 0.3, sigma.external = 0.5,p.epoch = 0.001,
t.external_events = c(100, 200, 300), t.external_durations = c(1, 2, 3),
t.start = 0, t.end = 1500, t.step = 0.01,
t.store = 1500, return.matrix = FALSE, stochastic = TRUE)

}
